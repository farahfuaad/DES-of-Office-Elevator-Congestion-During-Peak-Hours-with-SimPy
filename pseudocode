SET MAX_PASSENGERS = 10
SET FLOORS = 20
SET START_FLOOR = 1
SET SIMULATION_DURATION = 480 minutes
SET NUM_ELEVATORS = 3

INITIALIZE elevators with ID, current_floor = START_FLOOR, and empty passenger list
INITIALIZE empty waiting_passengers list
INITIALIZE empty queue_length list

FUNCTION generate_passenger():
    SET destination = random integer between 1 and FLOORS
    SET patience = random float between 3 and 10
    RETURN (destination, patience)

FUNCTION add_passengers(env):
    WHILE number of waiting_passengers < MAX_PASSENGERS:
        CALL generate_passenger()
        ADD new passenger to waiting_passengers
        PRINT time, destination, and patience

FUNCTION assign_passengers_to_elevators(env):
    FOR each elevator IN elevators:
        WHILE elevator passenger count < MAX_PASSENGERS AND waiting_passengers NOT empty:
            REMOVE passenger from waiting_passengers
            ADD passenger to elevator's passengers
            PRINT time and assignment details

FUNCTION remove_passengers(env, elevator):
    FOR each passenger IN elevator's passengers:
        IF passenger's destination == elevator's current_floor:
            REMOVE passenger from elevator
    IF any passenger got off:
        PRINT elevator ID, floor, and updated passenger count

FUNCTION move_elevator(env, elevator, target_floor):
    IF target_floor == current_floor:
        PRINT already on target floor
    ELSE IF target_floor > current_floor:
        PRINT going up
        FOR floor in range(current + 1 TO target_floor):
            WAIT 1.5 minutes
            PRINT arrival at each floor
    ELSE:
        PRINT going down
        FOR floor in range(current - 1 TO target_floor):
            WAIT 1.5 minutes
            PRINT arrival at each floor
    SET elevator current_floor = target_floor

PROCESS elevator_process(env, elevator):
    WHILE env.now < SIMULATION_DURATION:
        IF elevator has passengers:
            GET list of unique destination floors from passengers
            SORT destination floors
            FOR each floor in list:
                IF simulation time is over, BREAK
                CALL move_elevator(env, elevator, floor)
                CALL remove_passengers(env, elevator)
        ELSE:
            WAIT 1 minute

PROCESS elevator_system(env):
    PRINT system start message
    WHILE env.now < SIMULATION_DURATION:
        SET arrival_interval = 60 / random number between 10 and 15
        WAIT arrival_interval
        IF waiting_passengers < MAX_PASSENGERS:
            CALL add_passengers(env)
        CALL assign_passengers_to_elevators(env)
        RECORD queue length

BEGIN SIMULATION:
    PRINT "Elevator System Simulation"
    INITIALIZE random seed
    CREATE SimPy environment

    FOR each elevator:
        START elevator_process(env, elevator)

    START elevator_system(env)
    RUN simulation until SIMULATION_DURATION
    END 
